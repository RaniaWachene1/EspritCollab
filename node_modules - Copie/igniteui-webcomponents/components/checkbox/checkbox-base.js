var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { LitElement } from 'lit';
import { property, query, queryAssignedNodes, state } from 'lit/decorators.js';
import { alternateName } from '../common/decorators/alternateName.js';
import { blazorDeepImport } from '../common/decorators/blazorDeepImport.js';
import { blazorTwoWayBind } from '../common/decorators/blazorTwoWayBind.js';
import { watch } from '../common/decorators/watch.js';
import { EventEmitterMixin } from '../common/mixins/event-emitter.js';
import { FormAssociatedRequiredMixin } from '../common/mixins/form-associated-required.js';
import { requiredBooleanValidator } from '../common/validators.js';
let IgcCheckboxBaseComponent = class IgcCheckboxBaseComponent extends FormAssociatedRequiredMixin(EventEmitterMixin(LitElement)) {
    set value(value) {
        this._value = value;
        if (this.checked) {
            this.setFormValue(this._value || 'on');
        }
    }
    get value() {
        return this._value;
    }
    set checked(value) {
        this._checked = Boolean(value);
        this.setFormValue(this._checked ? this.value || 'on' : null);
        this.updateValidity();
        if (this.hasUpdated) {
            this.setInvalidState();
        }
    }
    get checked() {
        return this._checked;
    }
    constructor() {
        super();
        this.validators = [requiredBooleanValidator];
        this._checked = false;
        this.focused = false;
        this.hideLabel = false;
        this.labelPosition = 'after';
        this.addEventListener('keyup', this.handleKeyUp);
    }
    connectedCallback() {
        super.connectedCallback();
        this.updateValidity();
    }
    handleChange() {
        this.invalid = !this.checkValidity();
    }
    click() {
        this.input.click();
    }
    focus(options) {
        this.input.focus(options);
    }
    blur() {
        this.input.blur();
    }
    handleClick() {
        this.checked = !this.checked;
        this.emitEvent('igcChange', { detail: this.checked });
    }
    handleBlur() {
        this.emitEvent('igcBlur');
        this.focused = false;
    }
    handleFocus() {
        this._dirty = true;
        this.emitEvent('igcFocus');
    }
    handleMouseDown(event) {
        event.preventDefault();
        this.input.focus();
        this.focused = false;
    }
    handleKeyUp() {
        if (!this.focused) {
            this.focused = true;
        }
    }
    handleSlotChange() {
        this.hideLabel = this.label.length < 1;
    }
};
__decorate([
    query('input[type="checkbox"]', true)
], IgcCheckboxBaseComponent.prototype, "input", void 0);
__decorate([
    queryAssignedNodes({ flatten: true })
], IgcCheckboxBaseComponent.prototype, "label", void 0);
__decorate([
    state()
], IgcCheckboxBaseComponent.prototype, "focused", void 0);
__decorate([
    state()
], IgcCheckboxBaseComponent.prototype, "hideLabel", void 0);
__decorate([
    property()
], IgcCheckboxBaseComponent.prototype, "value", null);
__decorate([
    property({ type: Boolean }),
    blazorTwoWayBind('igcChange', 'detail')
], IgcCheckboxBaseComponent.prototype, "checked", null);
__decorate([
    property({ reflect: true, attribute: 'label-position' })
], IgcCheckboxBaseComponent.prototype, "labelPosition", void 0);
__decorate([
    watch('focused', { waitUntilFirstUpdate: true }),
    watch('indeterminate', { waitUntilFirstUpdate: true })
], IgcCheckboxBaseComponent.prototype, "handleChange", null);
__decorate([
    alternateName('focusComponent')
], IgcCheckboxBaseComponent.prototype, "focus", null);
__decorate([
    alternateName('blurComponent')
], IgcCheckboxBaseComponent.prototype, "blur", null);
IgcCheckboxBaseComponent = __decorate([
    blazorDeepImport
], IgcCheckboxBaseComponent);
export { IgcCheckboxBaseComponent };
//# sourceMappingURL=checkbox-base.js.map