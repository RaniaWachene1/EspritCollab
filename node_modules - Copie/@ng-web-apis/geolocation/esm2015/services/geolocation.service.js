import { Inject, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { finalize, shareReplay } from 'rxjs/operators';
import { GEOLOCATION } from '../tokens/geolocation';
import { POSITION_OPTIONS } from '../tokens/geolocation-options';
import { GEOLOCATION_SUPPORT } from '../tokens/geolocation-support';
import * as i0 from "@angular/core";
export class GeolocationService extends Observable {
    constructor(geolocationRef, geolocationSupported, positionOptions) {
        let watchPositionId = 0;
        super(subscriber => {
            if (!geolocationSupported) {
                subscriber.error('Geolocation is not supported in your browser');
            }
            watchPositionId = geolocationRef.watchPosition(position => subscriber.next(position), positionError => subscriber.error(positionError), positionOptions);
        });
        return this.pipe(finalize(() => geolocationRef.clearWatch(watchPositionId)), shareReplay({ bufferSize: 1, refCount: true }));
    }
}
GeolocationService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GeolocationService, deps: [{ token: GEOLOCATION }, { token: GEOLOCATION_SUPPORT }, { token: POSITION_OPTIONS }], target: i0.ɵɵFactoryTarget.Injectable });
GeolocationService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GeolocationService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: GeolocationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root',
                }]
        }], ctorParameters: function () { return [{ type: Geolocation, decorators: [{
                    type: Inject,
                    args: [GEOLOCATION]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [GEOLOCATION_SUPPORT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POSITION_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VvbG9jYXRpb24uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL2xpYnMvZ2VvbG9jYXRpb24vc3JjL3NlcnZpY2VzL2dlb2xvY2F0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsUUFBUSxFQUFFLFdBQVcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3JELE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUNsRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUMvRCxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQzs7QUFLbEUsTUFBTSxPQUFPLGtCQUFtQixTQUFRLFVBQStCO0lBQ25FLFlBQ3lCLGNBQTJCLEVBQ25CLG9CQUE2QixFQUNoQyxlQUFnQztRQUUxRCxJQUFJLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFFeEIsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLG9CQUFvQixFQUFFO2dCQUN2QixVQUFVLENBQUMsS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUM7YUFDcEU7WUFFRCxlQUFlLEdBQUcsY0FBYyxDQUFDLGFBQWEsQ0FDMUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUNyQyxhQUFhLENBQUMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQ2hELGVBQWUsQ0FDbEIsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUNaLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLGVBQWUsQ0FBQyxDQUFDLEVBQzFELFdBQVcsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQ3pCLENBQUM7SUFDNUIsQ0FBQzs7Z0hBeEJRLGtCQUFrQixrQkFFZixXQUFXLGFBQ1gsbUJBQW1CLGFBQ25CLGdCQUFnQjtvSEFKbkIsa0JBQWtCLGNBRmYsTUFBTTs0RkFFVCxrQkFBa0I7a0JBSDlCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzBEQUc0QyxXQUFXOzBCQUEvQyxNQUFNOzJCQUFDLFdBQVc7OzBCQUNsQixNQUFNOzJCQUFDLG1CQUFtQjs7MEJBQzFCLE1BQU07MkJBQUMsZ0JBQWdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmluYWxpemUsIHNoYXJlUmVwbGF5fSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0dFT0xPQ0FUSU9OfSBmcm9tICcuLi90b2tlbnMvZ2VvbG9jYXRpb24nO1xuaW1wb3J0IHtQT1NJVElPTl9PUFRJT05TfSBmcm9tICcuLi90b2tlbnMvZ2VvbG9jYXRpb24tb3B0aW9ucyc7XG5pbXBvcnQge0dFT0xPQ0FUSU9OX1NVUFBPUlR9IGZyb20gJy4uL3Rva2Vucy9nZW9sb2NhdGlvbi1zdXBwb3J0JztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgR2VvbG9jYXRpb25TZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxHZW9sb2NhdGlvblBvc2l0aW9uPiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoR0VPTE9DQVRJT04pIGdlb2xvY2F0aW9uUmVmOiBHZW9sb2NhdGlvbixcbiAgICAgICAgQEluamVjdChHRU9MT0NBVElPTl9TVVBQT1JUKSBnZW9sb2NhdGlvblN1cHBvcnRlZDogYm9vbGVhbixcbiAgICAgICAgQEluamVjdChQT1NJVElPTl9PUFRJT05TKSBwb3NpdGlvbk9wdGlvbnM6IFBvc2l0aW9uT3B0aW9ucyxcbiAgICApIHtcbiAgICAgICAgbGV0IHdhdGNoUG9zaXRpb25JZCA9IDA7XG5cbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB7XG4gICAgICAgICAgICBpZiAoIWdlb2xvY2F0aW9uU3VwcG9ydGVkKSB7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcignR2VvbG9jYXRpb24gaXMgbm90IHN1cHBvcnRlZCBpbiB5b3VyIGJyb3dzZXInKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgd2F0Y2hQb3NpdGlvbklkID0gZ2VvbG9jYXRpb25SZWYud2F0Y2hQb3NpdGlvbihcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9PiBzdWJzY3JpYmVyLm5leHQocG9zaXRpb24pLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uRXJyb3IgPT4gc3Vic2NyaWJlci5lcnJvcihwb3NpdGlvbkVycm9yKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk9wdGlvbnMsXG4gICAgICAgICAgICApO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5waXBlKFxuICAgICAgICAgICAgZmluYWxpemUoKCkgPT4gZ2VvbG9jYXRpb25SZWYuY2xlYXJXYXRjaCh3YXRjaFBvc2l0aW9uSWQpKSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pLFxuICAgICAgICApIGFzIEdlb2xvY2F0aW9uU2VydmljZTtcbiAgICB9XG59XG4iXX0=